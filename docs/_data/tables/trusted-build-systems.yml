appveyor-setup:
  headers:
    action: Action
    steps: Steps
    remarks: Remarks
    _attributes: 
      action: {style: "width: 20%"}
      steps: {style: "width: 60%"}
      remarks: {style: "width: 20%"}
  body:
    - action: Add an AppVeyor integration to a SignPath project
      steps: |
        1. On [ci.appveyor.com](https://ci.appveyor.com)
          * Select *Account* and *Security*
          * Make sure the checkboxes for both *API v1* and *API v2* are checked
        2. On [ci.appveyor.com](https://ci.appveyor.com)
          * Select *My Profile* and [*API Keys*](https://ci.appveyor.com/api-keys)
          * Remember the ① **Bearer token** for the next step
        3. On [SignPath.io](https://app.signpath.io)
          * Navigate to your *project*, scroll down to the *Trusted Build Systems* section and add a link to *AppVeyor*
          * In the dialog, enter the ① **API key** you just acquired
      remarks: SignPath.io must authenticate against Appveyor to retrieve the build artifacts
    - action: Encrypt the SignPath API token in AppVeyor
      steps: |
        1. On [SignPath.io](https://app.signpath.io)
          * Choose the Users menu and create a new *CI User* or open an existing one
          * Remember the ② **SignPath API token** for the next step
        2. On [ci.appveyor.com](https://ci.appveyor.com)
          * Open *Account Settings* and choose *[Encrypt YAML](https://ci.appveyor.com/tools/encrypt)*
          * Enter ② **``Bearer $SIGNPATH_API_TOKEN``** (without $)
          * Remember the ③ **encrypted SignPath API token** for the next step
      remarks: AppVeyor lets you encrypt secret values. You can then safely use the encrypted string in your appveyor.yaml file
    - action: Add a deploy Webhook
      steps: |
        Append this to your appveyor.yaml file:

        ~~~ yaml
        deploy:
        - provider: Webhook
          url: https://app.signpath.io/API/v1/$ORGANIZATION_ID/Integrations/AppVeyor?ProjectSlug=$PROJECT_SLUG&SigningPolicySlug=$SIGNING_POLICY_SLUG&ArtifactConfigurationSlug=$ARTIFACT_CONFIGURATION_SLUG
          authorization:
            secure: $ENCRYPTED_SIGNPATH_API_TOKEN
        ~~~

        | Parameter                                                 | Description
        |-----------------------------------------------------------|--------------------------------------------------------------------------------
        | `$ORGANIZATION_ID`                                       | SignPath organization ID (can be retrieved from the organization page)
        | `$PROJECT_SLUG`                                          | Project slug
        | `$SIGNING_POLICY_SLUG`                                   | Signing policy slug
        | `$ARTIFACT_CONFIGURATION_SLUG`                           | _Optional_ artifact configuration slug (default artifact configuration if not specified)
        | `$ENCRYPTED_SIGNPATH_API_TOKEN`                          | ③ The encrypted value from the previous step
      _attributes:
        steps: {colspan: 2}

github-extended-policies-runners:
  headers:
    policy: Policy
    description: Description
    _attributes: 
      policy: {style: "width: 25%"}
      description: {style: "width: 75%"}
  body:
    - policy: |
        `allowed_groups`
      description: Provide a list of GitHub runner group names. Ensures that all jobs of the workflow are executed on runners from one of the listed groups. Note that the `GitHub Actions` group is predefined and represents GitHub-hosted runners.

github-extended-policies-build:
  headers:
    policy: Policy
    description: Description
    _attributes: 
      policy: {style: "width: 25%"}
      description: {style: "width: 75%"}
  body:
    - policy: |
        `disallow_reruns`
      description: Set to `true` to prevent signing builds from re-runs. By enforcing this policy, old, temporarily failed builds cannot be re-run and signed under the false impression that they include recent changes, such as vulnerability fixes. These builds would still be identified by their branch name, e.g. `main`.

github-extended-policies-branch-ruleset-rules:
  headers:
    policy: Rule
    description: Description
    _attributes: 
      policy: {style: "width: 25%"}
      description: {style: "width: 75%"}
  body:
    - policy: |
        `restrict_creations`
      description: Set to `true` to allow only users with bypass permission to create matching refs.
    - policy: |
        `restrict_updates`
      description: Set to `true` to allow only  users with bypass permission to update matching refs.
    - policy: |
        `restrict_deletions`
      description: Set to `true` to allow only users with bypass permissions to delete matching refs.
    - policy: |
        `require_linear_history`
      description: Set to `true` to prevent merge commits from being pushed to matching refs.
    - policy: |
        `require_pull_request`
      description: |
        Require all commits be made to a non-target branch and submitted via a pull request before they can be merged. Can be set to `true` or defined as a block with the following parameters:
        * `min_required_approvals`: The minimum number of required approvals.
        * `dismiss_stale_reviews_on_push`: Set to `true` to dismiss stale pull request approvals when new commits are pushed.
        * `require_code_owner_review`: Set to `true` to require review from Code Owners.
        * `require_last_push_approval`: Set to `true` to require approval of the most recent reviewable push.
        * `require_review_thread_resolution`: Set to `true` to require conversation resolution before merging.
    - policy: |
        `block_force_pushes`
      description: Set to `true` to prevent users with push access from force pushing to refs.
    - policy: |
        `require_code_scanning`
      description: |
        Configure a list of code scanning `tools` which must provide scan results with the following entries:
        * `tool`: The name of the code scanning tool, e.g. `CodeQL`
        * `min_alerts_threshold`: one of `none`, `errors` or `warnings`
        * `min_security_alerts_threshold`: one of `none`, `critical`, `high`, `medium` or `all`

gitlab-parameters:
  headers:
    required: 
    component: Component input
    cli: Command line argument
    env: Environment variable
    default: Default value
    description: Description
  body:
    - component: |
        `stage`
      cli: |
        &ndash;
      env: |
        &ndash;
      default: |
        `sign`
      description: The GitLab pipeline stage at which the component should be executed.
    - component: |
        `job_name`
      cli: |
        &ndash;
      env: |
        &ndash;
      default: |
        `submit_signing_request (TODO)`
      description: The name of the given signing job.
    - component: |
        `connector_url`
      cli: |
        `--connector-url`
      env: |
        `SIGNPATH_CONNECTOR_URL`
      default: |
        `https://gitlab.connectors.signpath.io`
      description: The URL of the SignPath connector. Required if self-managed.
    - required: |
        `*`
      component: |
        `api_token_env_name`
      cli: |
        `--api-token`
      env: |
        `SIGNPATH_API_TOKEN`
      description: |
        The _Api Token_ for a user with submitter permissions in the specified project/signing policy. 
        The component only allows providing the token via an environment variable. The name of the environment variable can be overwritten using the `api_token_env_name` parameter.
    - required: |
        `*`
      component: |
        `gitlab_access_token_env_name`
      cli: |
        `--gitlab-access-token`
      env: |
        `SIGNPATH_GITLAB_ACCESS_TOKEN`
      description: |
        The _GitLab Access Token_ that can be used to retrieve [origin metadata](/documentation/origin-verification) from the GitLab instance.
        The component only allows providing the token via an environment variable. The name of the environment variable can be overwritten using the `gitlab_access_token_env_name` parameter.
    - required: |
        `*`
      component: |
        `organization_id`
      cli: |
        `--organization-id`
      env: |
        `SIGNPATH_ORGANIZATION_ID`
      description: The SignPath organization ID.
    - required: |
        `*`
      component: |
        `project_slug`
      cli: |
        `--project-slug`
      env: |
        `SIGNPATH_PROJECT_SLUG`
      description: The SignPath project slug.
    - required: |
        `*`
      component: |
        `signing_policy_slug`
      cli: |
        `--signing-policy-slug`
      env: |
        `SIGNPATH_SIGNING_POLICY_SLUG`
      description: The SignPath signing policy slug.
    - component: |
        `artifact_configuration_slug`
      cli: |
        `--artifact-configuration-slug`
      env: |
        `SIGNPATH_ARTIFACT_CONFIGURATION_SLUG`
      description: The SignPath artifact configuration slug.
    - required: |
        `*`
      component: |
        `artifacts_job_name`
      cli: |
        `--artifacts-job-name`
      env: |
        `SIGNPATH_ARTIFACTS_JOB_NAME`
      description: The name of the job that published the artifacts that will be signed.
    - component: |
        `wait_for_completion`
      cli: |
        `--wait-for-completion`
      env: |
        `SIGNPATH_WAIT_FOR_COMPLETION`
      default: |
        `true`
      description: Wait for the signing request to complete.
    - component: |
        &ndash;
      cli: |
        `--output-artifact-directory`
      env: |
        `SIGNPATH_OUTPUT_ARTIFACT_DIRECTORY`
      description: Path where the signed artifact will be extracted. The component always publishes the signed artifact when `wait_for_completion` is set to `true`.
    - component: |
        `parameters`
      cli: |
        `--parameters`
      env: |
        `SIGNPATH_PARAMETERS`
      description: |
        Parameters that map to [user-defined parameters] in the Artifact Configuration. TODO: format!!!
    - component: |
        `wait_for_completion_timeout_in_seconds`
      cli: |
        `--wait-for-completion-timeout-in-seconds`
      env: |
        `SIGNPATH_WAIT_FOR_COMPLETION_TIMEOUT_IN_SECONDS`
      default: |
        `600`
      description: Maximum time in seconds that the job/tool will wait for the signing request to complete.
    - component: |
        `service_unavailable_timeout_in_seconds`
      cli: |
        `--service-unavailable-timeout-in-seconds`
      env: |
        `SIGNPATH_SERVICE_UNAVAILABLE_TIMEOUT_IN_SECONDS`
      default: |
        `600`
      description: Total time in seconds that the job/tool will wait for a single service call to succeed (across several retries).
    - component: |
        `download_signed_artifact_timeout_in_seconds`
      cli: |
        `--download-signed-artifact-timeout-in-seconds`
      env: |
        `SIGNPATH_DOWNLOAD_SIGNED_ARTIFACT_TIMEOUT_IN_SECONDS`
      default: |
        `300`
      description: HTTP timeout when downloading the signed artifact.
